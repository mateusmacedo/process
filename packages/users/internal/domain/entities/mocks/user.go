// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/entities/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInterface is a mock of UserInterface interface.
type MockUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserInterfaceMockRecorder
}

// MockUserInterfaceMockRecorder is the mock recorder for MockUserInterface.
type MockUserInterfaceMockRecorder struct {
	mock *MockUserInterface
}

// NewMockUserInterface creates a new mock instance.
func NewMockUserInterface(ctrl *gomock.Controller) *MockUserInterface {
	mock := &MockUserInterface{ctrl: ctrl}
	mock.recorder = &MockUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInterface) EXPECT() *MockUserInterfaceMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockUserInterface) AddRole(role string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRole", role)
}

// AddRole indicates an expected call of AddRole.
func (mr *MockUserInterfaceMockRecorder) AddRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockUserInterface)(nil).AddRole), role)
}

// AddToGroup mocks base method.
func (m *MockUserInterface) AddToGroup(group string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToGroup", group)
}

// AddToGroup indicates an expected call of AddToGroup.
func (mr *MockUserInterfaceMockRecorder) AddToGroup(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToGroup", reflect.TypeOf((*MockUserInterface)(nil).AddToGroup), group)
}

// Delete mocks base method.
func (m *MockUserInterface) Delete() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete")
}

// Delete indicates an expected call of Delete.
func (mr *MockUserInterfaceMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserInterface)(nil).Delete))
}

// EndSession mocks base method.
func (m *MockUserInterface) EndSession() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndSession")
}

// EndSession indicates an expected call of EndSession.
func (mr *MockUserInterfaceMockRecorder) EndSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockUserInterface)(nil).EndSession))
}

// HasRole mocks base method.
func (m *MockUserInterface) HasRole(role string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRole", role)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRole indicates an expected call of HasRole.
func (mr *MockUserInterfaceMockRecorder) HasRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRole", reflect.TypeOf((*MockUserInterface)(nil).HasRole), role)
}

// IsActive mocks base method.
func (m *MockUserInterface) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockUserInterfaceMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockUserInterface)(nil).IsActive))
}

// IsDeleted mocks base method.
func (m *MockUserInterface) IsDeleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDeleted indicates an expected call of IsDeleted.
func (mr *MockUserInterfaceMockRecorder) IsDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeleted", reflect.TypeOf((*MockUserInterface)(nil).IsDeleted))
}

// IsInGroup mocks base method.
func (m *MockUserInterface) IsInGroup(group string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInGroup", group)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInGroup indicates an expected call of IsInGroup.
func (mr *MockUserInterfaceMockRecorder) IsInGroup(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInGroup", reflect.TypeOf((*MockUserInterface)(nil).IsInGroup), group)
}

// NextVersion mocks base method.
func (m *MockUserInterface) NextVersion(versionBy string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NextVersion", versionBy)
}

// NextVersion indicates an expected call of NextVersion.
func (mr *MockUserInterfaceMockRecorder) NextVersion(versionBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextVersion", reflect.TypeOf((*MockUserInterface)(nil).NextVersion), versionBy)
}

// RemoveFromGroup mocks base method.
func (m *MockUserInterface) RemoveFromGroup(group string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFromGroup", group)
}

// RemoveFromGroup indicates an expected call of RemoveFromGroup.
func (mr *MockUserInterfaceMockRecorder) RemoveFromGroup(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromGroup", reflect.TypeOf((*MockUserInterface)(nil).RemoveFromGroup), group)
}

// RemoveRole mocks base method.
func (m *MockUserInterface) RemoveRole(role string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveRole", role)
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockUserInterfaceMockRecorder) RemoveRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockUserInterface)(nil).RemoveRole), role)
}

// StartSession mocks base method.
func (m *MockUserInterface) StartSession(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartSession", token)
}

// StartSession indicates an expected call of StartSession.
func (mr *MockUserInterfaceMockRecorder) StartSession(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockUserInterface)(nil).StartSession), token)
}

// Update mocks base method.
func (m *MockUserInterface) Update(name, email, password string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", name, email, password)
}

// Update indicates an expected call of Update.
func (mr *MockUserInterfaceMockRecorder) Update(name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserInterface)(nil).Update), name, email, password)
}
